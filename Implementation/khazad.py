# Copy a hex key of length 16 bytes here below
key="80000000000000000000000000000000"
# Copy plaintext of 8 bytes here below
plain="0000000000000000"

k_sbox = [ 	[0xBA, 0x54, 0x2F, 0x74, 0x53, 0xD3, 0xD2, 0x4D, 0x50, 0xAC, 0x8D, 0xBF, 0x70, 0x52, 0x9A, 0x4C],
			[0xEA, 0xD5, 0x97, 0xD1, 0x33, 0x51, 0x5B, 0xA6, 0xDE, 0x48, 0xA8, 0x99, 0xDB, 0x32, 0xB7, 0xFC],
			[0xE3, 0x9E, 0x91, 0x9B, 0xE2, 0xBB, 0x41, 0x6E, 0xA5, 0xCB, 0x6B, 0x95, 0xA1, 0xF3, 0xB1, 0x02],
			[0xCC, 0xC4, 0x1D, 0x14, 0xC3, 0x63, 0xDA, 0x5D, 0x5F, 0xDC, 0x7D, 0xCD, 0x7F, 0x5A, 0x6C, 0x5C],
			[0xF7, 0x26, 0xFF, 0xED, 0xE8, 0x9D, 0x6F, 0x8E, 0x19, 0xA0, 0xF0, 0x89, 0x0F, 0x07, 0xAF, 0xFB],
			[0x08, 0x15, 0x0D, 0x04, 0x01, 0x64, 0xDF, 0x76, 0x79, 0xDD, 0x3D, 0x16, 0x3F, 0x37, 0x6D, 0x38],
			[0xB9, 0x73, 0xE9, 0x35, 0x55, 0x71, 0x7B, 0x8C, 0x72, 0x88, 0xF6, 0x2A, 0x3E, 0x5E, 0x27, 0x46],
			[0x0C, 0x65, 0x68, 0x61, 0x03, 0xC1, 0x57, 0xD6, 0xD9, 0x58, 0xD8, 0x66, 0xD7, 0x3A, 0xC8, 0x3C],
			[0xFA, 0x96, 0xA7, 0x98, 0xEC, 0xB8, 0xC7, 0xAE, 0x69, 0x4B, 0xAB, 0xA9, 0x67, 0x0A, 0x47, 0xF2],
			[0xB5, 0x22, 0xE5, 0xEE, 0xBE, 0x2B, 0x81, 0x12, 0x83, 0x1B, 0x0E, 0x23, 0xF5, 0x45, 0x21, 0xCE],
			[0x49, 0x2C, 0xF9, 0xE6, 0xB6, 0x28, 0x17, 0x82, 0x1A, 0x8B, 0xFE, 0x8A, 0x09, 0xC9, 0x87, 0x4E],
			[0xE1, 0x2E, 0xE4, 0xE0, 0xEB, 0x90, 0xA4, 0x1E, 0x85, 0x60, 0x00, 0x25, 0xF4, 0xF1, 0x94, 0x0B],
			[0xE7, 0x75, 0xEF, 0x34, 0x31, 0xD4, 0xD0, 0x86, 0x7E, 0xAD, 0xFD, 0x29, 0x30, 0x3B, 0x9F, 0xF8],
			[0xC6, 0x13, 0x06, 0x05, 0xC5, 0x11, 0x77, 0x7C, 0x7A, 0x78, 0x36, 0x1C, 0x39, 0x59, 0x18, 0x56],
			[0xB3, 0xB0, 0x24, 0x20, 0xB2, 0x92, 0xA3, 0xC0, 0x44, 0x62, 0x10, 0xB4, 0x84, 0x43, 0x93, 0xC2],
			[0x4A, 0xBD, 0x8F, 0x2D, 0xBC, 0x9C, 0x6A, 0x40, 0xCF, 0xA2, 0x80, 0x4F, 0x1F, 0xCA, 0xAA, 0x42] ]

sbox=[0 for i in range(256)]
for i in range(16):
	for j in range(16):
		sbox[16*i+j]=k_sbox[i][j]

def KeyExpansion(K_1,K_2):
	#for k0, k1 we separately find using K-1 and K-2
	keys1 = []
	C = findC(0)
	k = roundfunction(C,K_1)
	l = xor(k,K_2)
	keys1.append(l)
	Ct = findC(1)
	kt = roundfunction(Ct,keys1[0])
	lt = xor(kt,K_1)
	keys1.append(lt)
	# for k2 - k8 we run a loop
	for i in range(2,9):
		Cs = findC(i)
		ks = roundfunction(Cs,keys1[i-1])
		ls = xor(ks,keys1[i-2])
		keys1.append(l)
	return keys1
	
def xor(a,b):
	c = [0 for i in range(8)]
	for i in range(8):
		c[i] = a[i] ^ b[i]
	return c

def roundfunction(p,k):
	#gamma (sbox)
	c = [0 for i in range(8)]
	for i in range(8):
		c[i]= sbox[p[i]]
	#theta (linear transformation)
	d = [0 for i in range(8)] 
	H = [ [1,3,4,5,6,8,0xB,7],
	 [3,1,5,4,8,6,7,0xB],
	 [4,5,1,3,0xB,7,6,8],
	 [5,4,3,1,7,0xB,8,6],
	 [6,8,0xB,7,1,3,4,5],
	 [8,6,7,0xB,3,1,5,4],
	 [0xB,7,6,8,4,5,1,3],
	 [7,0xB,8,6,5,4,3,1] ]  
	for i in range(8):
		s=0
		for j in range(8):
			s^= c[j]*H[j][i]
		d[i] =s % 256

	#sigma (xor with key)
	e = [0 for i in range(8)]
	e = xor(d,k)
	return e

def findC(i):
	c = [0 for j in range(8)]
	for j in range(8):
		c[j] = sbox[8*i+j]
	return c
	
def Encrypt(plaintext,keys):
	# initial key xor with key[0]
	pt = xor(plaintext,keys[0])
	
	# 1-7 full rounds 
	pt1 = roundfunction(pt,keys[1])
	pt2 = roundfunction(pt1,keys[2])
	pt3 = roundfunction(pt2,keys[3])
	pt4 = roundfunction(pt3,keys[4])
	pt5 = roundfunction(pt4,keys[5])
	pt6 = roundfunction(pt5,keys[6])
	pt7 = roundfunction(pt6,keys[7])
	
	# last round (no theta operation)
	#gamma (sbox)
	cipher = [0 for i in range(8)]
	for i in range(8):
		cipher[i]= sbox[pt7[i]]
		
	#sigma (key xor with last key)
	e = [0 for i in range(8)]
	e = xor(cipher,keys[8])
	
	#returning the ciphertext in hex string 
	cip = ""
	for i in range(8):
		a = hex(e[i])
		if(len(a)==4):
			cip+=a[2:4]
		else:
			cip+="0"+a[2]
	return cip


plaintext=[]
n = int(len(plain)/2)
for i in range(n):
	plaintext.append(int(plain[(0+i*2):(2+i*2)],16))

K_1=[]
K_2=[]

for i in range(8):
	K_1.append(int(key[(0+i*2):(2+i*2)],16))
	K_2.append(int(key[(16+i*2):(18+i*2)],16))

keys = KeyExpansion(K_1,K_2)
cip = Encrypt(plaintext,keys)

print("key = "+key)
print("plaintext = "+plain)
print("ciphertext = "+cip)
